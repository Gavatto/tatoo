<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Назва підключення черги за замовчуванням
    |------------------------------------------------ ------------------------
    |
    | API черги Laravel підтримує низку бек-ендів за допомогою єдиного
    | API, що дає вам зручний доступ до кожного серверного компонента за допомогою того самого
    | синтаксис для кожного. Тут ви можете визначити підключення за замовчуванням.
    |
    */

    'default' => env('QUEUE_CONNECTION', 'sync'),

    /*
    |--------------------------------------------------------------------------
    | Підключення до черги
    |------------------------------------------------ ------------------------
    |
    | Тут ви можете налаштувати інформацію про підключення для кожного сервера, який
    | використовується вашою програмою. Додано конфігурацію за замовчуванням
    | для кожної серверної частини, що постачається з Laravel. Ви можете додати більше.
    |
    | Drivers: "sync", "database", "beanstalkd", "sqs", "redis", "null"
    |
    */

    'connections' => [

        'sync' => [
            'driver' => 'sync',
        ],

        'database' => [
            'driver' => 'database',
            'table' => 'jobs',
            'queue' => 'default',
            'retry_after' => 90,
            'after_commit' => false,
        ],

        'beanstalkd' => [
            'driver' => 'beanstalkd',
            'host' => 'localhost',
            'queue' => 'default',
            'retry_after' => 90,
            'block_for' => 0,
            'after_commit' => false,
        ],

        'sqs' => [
            'driver' => 'sqs',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'prefix' => env('SQS_PREFIX', 'https://sqs.us-east-1.amazonaws.com/your-account-id'),
            'queue' => env('SQS_QUEUE', 'default'),
            'suffix' => env('SQS_SUFFIX'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'after_commit' => false,
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => 'default',
            'queue' => env('REDIS_QUEUE', 'default'),
            'retry_after' => 90,
            'block_for' => null,
            'after_commit' => false,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Пакетування завдань
    |------------------------------------------------ ------------------------
    |
    | Наступні параметри налаштовують базу даних і таблицю, які зберігають завдання
    | пакетування інформації. Ці параметри можна оновити до будь-якої бази даних
    | підключення та таблицю, визначену вашою програмою.
    |
    */

    'batching' => [
        'database' => env('DB_CONNECTION', 'mysql'),
        'table' => 'job_batches',
    ],

    /*
    |--------------------------------------------------------------------------
    | Невдалі завдання черги
    |------------------------------------------------ ------------------------
    |
    | Ці параметри налаштовують поведінку невдалого журналювання завдань черги, щоб ви
    | може контролювати, яка база даних і таблиця використовуються для зберігання завдань, які
    | зазнали невдачі. Ви можете змінити їх на будь-яку базу даних/таблицю.
    |
    */

    'failed' => [
        'driver' => env('QUEUE_FAILED_DRIVER', 'database-uuids'),
        'database' => env('DB_CONNECTION', 'mysql'),
        'table' => 'failed_jobs',
    ],

];
